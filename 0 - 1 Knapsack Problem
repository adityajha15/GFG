class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        //bottom-up approach
        int n=val.length;
        int dp[][]=new int[n][W+1];
        for(int i=0;i<n;i++)
        {
            dp[i][0]=0;
        }
        for(int j=0;j<=W;j++)
        {
            if(wt[0]<=j)
            {
                dp[0][j]=val[0];
            }
            else
            {
                dp[0][j]=0;
            }
        }
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=W;j++)
            {
                int pick=0;
                if(wt[i]<=j)
                {
                    pick=val[i]+dp[i-1][j-wt[i]];
                }
                int nopick=0+dp[i-1][j];
                dp[i][j]=Math.max(pick,nopick);
            }
        }
        return dp[n-1][W];
    }
}
